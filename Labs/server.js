/**
*
* Do not Edit this file; doing so might break your project.  Nevertheless, it is
* valuable to review this file as it forms the basis of a node - Express web
* server that you may want to duplicate in a future project.
*
*/

// This allows you to use the .env file in your project. The config() method
// reads the .env file (and any file that ends with .env) and puts all of the
// variables into the process.env object.
require('dotenv').config();

// In addition to setting variables in the .env file you can set global values
// here that can be used anywhere in the application.
process.env.COOKIE_NAME = 'itc210_session';

// Get the protocol (http or https) from .env and set the global "use_https" accordingly
// Report to the console if the PROTOCOL is invalid.
const use_https = process.env.PROTOCOL == 'https';
if (!use_https && process.env.PROTOCOL != 'http') {
	console.error(`Invalid PROTOCOL value in .env: ${process.env.PROTOCOL}`);
	process.exit(-1);
}

// Get the port number from .env
const port = parseInt(process.env.PORT, 10);
if (!port) {
	console.error(`Invalid PORT value in .env: ${process.env.PORT}`);
	process.exit(-1);
}

/* === Prepare the Mongoose connection to the MongoDB database ===*/

/**
 * Callback function that reports to the console whether the database is
 * connected and configured properly.
 * @param {mongoose} mg 
 */
async function checkDatabaseConnection(mg) {
	// Make sure the database exists and is selected
	let dbExists = false;
	let dbSelected = false;
	const { databases } = await mg.connection.listDatabases();

	// This validation will let you name the database something other than 'Todo'.
	for (let db of databases) {
		if (db.name == mg.connection.name) {
			dbExists = true;
			dbSelected = true;
			break;
		}
		else if (db.name == "Todo") {
			dbExists = true;
		}
	}
	if (!dbExists || !dbSelected) {
		if (!dbExists) console.error("Database 'Todo' not found.");
		else if (!dbSelected) console.error("Database 'Todo' is not selected. Did you forget to add it to the connection string?");
		mg.disconnect();
	}
	else {
		console.log("MongoDb connected.");
	}
}

// Connect to MongoDB using Mongoose. Report error to the console if
// anything doesn't work.
const connectString = process.env.MONGODB_CONNECTION_STRING;
if (connectString) {
	var mongoose = require('mongoose');
	mongoose.connect(connectString)
		.then(checkDatabaseConnection, (err)=>console.log(`MongoDb error: ${err} Check your connection string.`));
}
else {
	console.error('No value found in .env for MONGODB_CONNECTION_STRING');
	console.error('Database not connected.');
}

/* ======== Create and configure the Express web application ========*/

// Require these packages
const express = require('express');
const cookieParser = require('cookie-parser');

// App is your express server
const app = express();
app.use(cookieParser()); // Enable the use of req.cookies
app.use(express.json()); // Automatically parse json submissions into req.body

/* ======== Add Passport authentication service to Express ========*/

// Configure passport for authentication
var passport = require('passport');

// Passport requires that you implement serializeUser. It is trivial when using cookie-session.
passport.serializeUser(function(user, cb) {
    cb(null, user);
});

// Passport requires that you implement deserializeUser. It is trivial when using cookie-session.
passport.deserializeUser(function(user, cb) {
    cb(null, user);
});

app.use(passport.initialize());

/* ======== Use CORS to permit cross-origin use if specified ======== */
let cookieOptions = {}; // this will be used by session-cookie below.
{
	// CORS will allow a front end specified in the .env to have access to restricted resources.
	const corsOrigin = process.env.CORS_CLIENT_ORIGIN;
	if (corsOrigin) {
		let cors = require('cors');
		app.use(cors({
			origin: corsOrigin,
			credentials: true
		}));
		if (corsOrigin.startsWith("https://")) {
			cookieOptions = {sameSite: 'none', secure: true};
		}
		console.log('Accepting cross-origin requests from: ' + corsOrigin);
	}
}

/* ======== Set up session management for Express ========*/

// We use session-cookie documented here: https://www.npmjs.com/package/session-cookie
// The more common alternative is express-session but that consumes server resources
// See: https://expressjs.com/en/resources/middleware/session.html
const session = require('session-cookie');
app.use(session({
    name: process.env.COOKIE_NAME,
    secret: process.env.SESSION_SECRET,
    maxAge: 1000 * 60 * 60 * 24 * 7, // A week-long cookie
	cookie: cookieOptions
}));

app.use(passport.session());

/* ======== Connect up the Express application routes ========*/

// This will load app/index.js
app.use(require('./app'));

/* ======== Create the HTTP(S) server ========*/

// Create either an http or an https server according to the .env variable
let server;
if (use_https) {
	const https = require(`https`);
	const fs = require('fs');
	const prefix = `/etc/letsencrypt/live/${process.env.DOMAIN}/`;
	if (!fs.existsSync(prefix + 'privkey.pem') || !fs.existsSync(prefix + 'fullchain.pem')) {
		console.error(`HTTPS PROTOCOL specified in .env but no certificate found in '${prefix}'.`);
		process.exit(-1);
	}

	const options = {
		key: fs.readFileSync(prefix + 'privkey.pem'),
		cert: fs.readFileSync(prefix + 'fullchain.pem')
	};
	server = https.createServer(options, app);
}
else {
	const http = require(`http`);
	server = http.createServer(app);
}

/* ======== Start the HTTPS server ========*/

// Set a callback for when the server starts
server.on('listening', () => {
	console.log(`Listening on port ${server.address().port}`);
});

// Set a callback for when the server encounters an error
server.on('error', (error) => {
	if (error.syscall !== `listen`) {
		throw error;
	}

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case `EACCES`:
			console.error(`Port ${port} requires elevated privileges`);
			process.exit(1);
		case `EADDRINUSE`:
			console.error(`Port ${port} is already in use`);
			process.exit(1);
		default:
			throw error;
	}
});

// Start the server
server.listen(port);